syntax = "proto3";

package dps;

service BrokerServer
{
  // replication of messages 
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}

  // leader election for topics 
  rpc StartElection(StartElectionRequest) returns (StartElectionResponse) {}
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
  
  // data streaming APIs 
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
  rpc ReadMessageStream(ReadMessageRequest) returns (stream ReadMessageResponse) {}
}

message LogEntry {
    uint32 index = 1;
    uint32 term = 2;
    uint32 topicId = 3;
    uint32 messageIndex = 4;
    string message = 5;
}

message AppendEntriesRequest {
    uint32 topicId = 1;
    uint32 term = 2;
    uint32 leaderId = 3;
    uint32 prevLogIndex = 4;
    uint32 prevLogTerm = 5;
    repeated LogEntry entries = 6;
    uint32 leaderCommitIndex = 7;
}

message AppendEntriesResponse {
    uint32 currTerm = 1;
    bool success = 2;
}

message StartElectionRequest {
  uint32 topicId = 1;
}
message StartElectionResponse {}

message RequestVoteRequest { 
  uint32 term = 1;
  uint32 candidateId = 2;
  uint32 lastLogTerm = 3;
  uint32 lastLogIndex = 4;
  uint32 topicId = 5;
}
message RequestVoteResponse { 
  uint32 term = 1;
  bool voteGranted = 2;
}

message SendMessageRequest { }
message SendMessageResponse { }
message ReadMessageRequest { }
message ReadMessageResponse { }

service GuruServer
{
  // pub/sub clients to get broker for operations
  rpc GetBrokerForWrite(GetBrokerRequest) returns (GetBrokerResponse) {}
  rpc GetBrokerForRead(GetBrokerRequest) returns (GetBrokerResponse) {}

  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {}

  rpc AddTopic(AddTopicRequest) returns (AddTopicResponse) {}

  // Communication with brokers
  rpc SetLeader(SetLeaderRequest) returns (SetLeaderResponse) {}
  rpc SendHeartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
  rpc RequestConfig(ClusterConfigRequest) returns (ClusterConfigResponse) {}
}

message GetBrokerRequest { }
message GetBrokerResponse { }

message SubscribeRequest { }
message SubscribeResponse { }

message AddTopicRequest { }
message AddTopicResponse { }

message SetLeaderRequest { }
message SetLeaderResponse { }

message HeartbeatRequest {
  uint32 serverid = 1;
  uint32 clusterid = 2;
}
message HeartbeatResponse {
  bool success = 1;
}

message ServerConfig {
  uint32 serverid = 1;
  string servaddr = 2;
}
message ClusterConfigRequest {
  uint32 serverid = 1;
}
message ClusterConfigResponse {
  uint32 serverid = 1;
  uint32 clusterid = 2;
  uint32 clustersize = 3;
  repeated ServerConfig brokers = 4;
  repeated uint32 topics = 5;
}